/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5/samples
 */

plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
}

jacoco {
    toolVersion = "0.8.11"  // Latest stable version as of 2024
}

// Define exclusions in one place to maintain consistency
def exclusions = ['**/*Test*', '@Generated']

// Test pattern for excluding files from test coverage
def testPattern = ['**/*Test*', '@Generated']

sonar {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.qualitygate.wait", true  // Fails build if quality gate fails
        property "sonar.qualitygate.timeout", "300"  // 5 minutes timeout

        // Sonar exclusions
        property "sonar.coverage.exclusions", exclusions.join(',')
        property "sonar.test.exclusions", "src/test/**/*," + testPattern.join(',')
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportPaths", "${buildDir}/test-results/test"
        property "sonar.tests", "src/test/java"

        // Quality Gates
        property "sonar.qualitygate.condition.1.metric", "coverage"
        property "sonar.qualitygate.condition.1.op", "LT"
        property "sonar.qualitygate.condition.1.error", "99"

        property "sonar.qualitygate.condition.2.metric", "code_smells"
        property "sonar.qualitygate.condition.2.op", "GT"
        property "sonar.qualitygate.condition.2.error", "0"

        property "sonar.qualitygate.condition.3.metric", "bugs"
        property "sonar.qualitygate.condition.3.op", "GT"
        property "sonar.qualitygate.condition.3.error", "0"
    }
}

group = 'io.equalexperts'
version = '0.3.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    mockitoVersion = '5.15.2'
    junitBomVersion = '5.10.0'
    validatorVersion = '9.0.0.CR1'
    glassfishVersion = '4.0.2'
    l4jVersion = '2.24.3'
    lombokVersion = '1.18.36'
    gsonVersion = '2.12.1'
}

dependencies {
    // Project Dependencies
    implementation("org.hibernate.validator:hibernate-validator:${validatorVersion}")
    implementation("org.glassfish:jakarta.el:${glassfishVersion}") // Required Hibernate Validator dependency
    implementation "com.google.code.gson:gson:${gsonVersion}"

    // Logging
    compileOnly "org.projectlombok:lombok:${lombokVersion}" // Lombok for annotation based logging
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${l4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${l4jVersion}"

    // Test Dependencies
    testImplementation(platform("org.junit:junit-bom:${junitBomVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("org.jacoco:org.jacoco.core:${jacoco.toolVersion}")

}

test {
    useJUnitPlatform() {
        if (project.hasProperty('tags')) {
            includeTags project.tags.split(',')
        }
    }
    finalizedBy jacocoTestReport
    failFast = true
}


jacocoTestReport {
    dependsOn test  // Tests are required to run before generating the report

    reports {
        xml.required = true  // XML report for CI tools
        csv.required = false
        html {
            required = true
            outputLocation = layout.buildDirectory.dir('reports/jacoco')
        }
    }

    classDirectories.setFrom(
            fileTree(dir: "${buildDir}/classes/java/main", excludes: [
                    '**/*Test*',
                    '@Generated'
            ])
    )

}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.99
            }
            excludes = exclusions
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['io.equalexperts.*']
            excludes = ['**/*Test*', '@Generated']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.99
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.99
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.99
            }

            excludes = exclusions
        }
    }
}

// Force verification checks
check.dependsOn jacocoTestCoverageVerification

// Ensure reports are generated before SonarQube analysis
tasks.sonarqube {
    dependsOn jacocoTestReport
}


// Make test task depend on verification
test.finalizedBy jacocoTestCoverageVerification

// Add a task to run all quality checks
task qualityCheck {
    dependsOn test
    dependsOn jacocoTestCoverageVerification
    dependsOn sonar

    jacocoTestCoverageVerification.mustRunAfter test

}

tasks.sonarqube {
    dependsOn jacocoTestCoverageVerification
}